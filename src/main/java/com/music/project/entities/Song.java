package com.music.project.entities;
// Generated Jan 4, 2025, 3:25:22 PM by Hibernate Tools 4.3.6.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import static jakarta.persistence.GenerationType.IDENTITY;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;
import jakarta.persistence.UniqueConstraint;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.NoArgsConstructor;

/**
 * Song generated by hbm2java
 */
@Entity
@Table(name = "song", uniqueConstraints = @UniqueConstraint(columnNames = "slug"))
@AllArgsConstructor

@Builder
public class Song implements java.io.Serializable {

	private Integer id;
	private Album album;
	private String name;
	private String slug;
	private String urlSource;
	private String photo;
	private Date releaseDay;
	private Date createdAt;
	private Date updateAt;
	private Set<SongArtist> songArtists = new HashSet<SongArtist>(0);
	private Set<SongGenre> songGenres = new HashSet<SongGenre>(0);
	private Set<PlaylistSong> playlistSongs = new HashSet<PlaylistSong>(0);
	private Set<SongReaction> songReactions = new HashSet<SongReaction>(0);
	private Set<StreamHistory> streamHistories = new HashSet<StreamHistory>(0);

	public Song() {
	}

	public Song(String name) {
		this.name = name;
	}

	public Song(Album album, String name, String slug, String urlSource, String photo, Date releaseDay, Date createdAt,
			Date updateAt, Set<SongArtist> songArtists, Set<SongGenre> songGenres, Set<PlaylistSong> playlistSongs,
			Set<SongReaction> songReactions, Set<StreamHistory> streamHistories) {
		this.album = album;
		this.name = name;
		this.slug = slug;
		this.urlSource = urlSource;
		this.photo = photo;
		this.releaseDay = releaseDay;
		this.createdAt = createdAt;
		this.updateAt = updateAt;
		this.songArtists = songArtists;
		this.songGenres = songGenres;
		this.playlistSongs = playlistSongs;
		this.songReactions = songReactions;
		this.streamHistories = streamHistories;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "album_id")
	public Album getAlbum() {
		return this.album;
	}

	public void setAlbum(Album album) {
		this.album = album;
	}

	@Column(name = "name", nullable = false)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "slug", unique = true)
	public String getSlug() {
		return this.slug;
	}

	public void setSlug(String slug) {
		this.slug = slug;
	}

	@Column(name = "url_source", length = 400)
	public String getUrlSource() {
		return this.urlSource;
	}

	public void setUrlSource(String urlSource) {
		this.urlSource = urlSource;
	}

	@Column(name = "photo", length = 400)
	public String getPhoto() {
		return this.photo;
	}

	public void setPhoto(String photo) {
		this.photo = photo;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "release_day", length = 26)
	public Date getReleaseDay() {
		return this.releaseDay;
	}

	public void setReleaseDay(Date releaseDay) {
		this.releaseDay = releaseDay;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created_at", length = 26)
	public Date getCreatedAt() {
		return this.createdAt;
	}

	public void setCreatedAt(Date createdAt) {
		this.createdAt = createdAt;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "update_at", length = 26)
	public Date getUpdateAt() {
		return this.updateAt;
	}

	public void setUpdateAt(Date updateAt) {
		this.updateAt = updateAt;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "song")
	public Set<SongArtist> getSongArtists() {
		return this.songArtists;
	}

	public void setSongArtists(Set<SongArtist> songArtists) {
		this.songArtists = songArtists;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "song")
	public Set<SongGenre> getSongGenres() {
		return this.songGenres;
	}

	public void setSongGenres(Set<SongGenre> songGenres) {
		this.songGenres = songGenres;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "song")
	public Set<PlaylistSong> getPlaylistSongs() {
		return this.playlistSongs;
	}

	public void setPlaylistSongs(Set<PlaylistSong> playlistSongs) {
		this.playlistSongs = playlistSongs;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "song")
	public Set<SongReaction> getSongReactions() {
		return this.songReactions;
	}

	public void setSongReactions(Set<SongReaction> songReactions) {
		this.songReactions = songReactions;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "song")
	public Set<StreamHistory> getStreamHistories() {
		return this.streamHistories;
	}

	public void setStreamHistories(Set<StreamHistory> streamHistories) {
		this.streamHistories = streamHistories;
	}

}
